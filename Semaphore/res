==6973== Helgrind, a thread error detector
==6973== Copyright (C) 2007-2013, and GNU GPL'd, by OpenWorks LLP et al.
==6973== Using Valgrind-3.10.0 and LibVEX; rerun with -h for copyright info
==6973== Command: ./test.o
==6973== Parent PID: 6972
==6973== 
==6973== ---Thread-Announcement------------------------------------------
==6973== 
==6973== Thread #1 is the program's root thread
==6973== 
==6973== ---Thread-Announcement------------------------------------------
==6973== 
==6973== Thread #9 was created
==6973==    at 0x59625EE: clone (clone.S:74)
==6973==    by 0x4E422B9: do_clone.constprop.3 (createthread.c:75)
==6973==    by 0x4E43762: create_thread (createthread.c:245)
==6973==    by 0x4E43762: pthread_create@@GLIBC_2.2.5 (pthread_create.c:606)
==6973==    by 0x4C2EEBD: pthread_create_WRK (hg_intercepts.c:270)
==6973==    by 0x402C6E: createPthread(void* (*)(void*)) (Semaphore.cpp:35)
==6973==    by 0x4012C2: main (test.cpp:59)
==6973== 
==6973== ----------------------------------------------------------------
==6973== 
==6973==  Lock at 0x604740 was first observed
==6973==    at 0x4C30616: pthread_mutex_lock (hg_intercepts.c:593)
==6973==    by 0x402ACC: __gthread_mutex_lock(pthread_mutex_t*) (gthr-default.h:748)
==6973==    by 0x402CAB: std::mutex::lock() (mutex:135)
==6973==    by 0x402DD2: std::unique_lock<std::mutex>::lock() (mutex:474)
==6973==    by 0x402D5A: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (mutex:406)
==6973==    by 0x402B7B: Semaphore::P() (Semaphore.cpp:9)
==6973==    by 0x4011AB: customer(void*) (test.cpp:39)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973==  Address 0x604740 is 0 bytes inside data symbol "s"
==6973== 
==6973== Possible data race during read of size 4 at 0x604798 by thread #1
==6973== Locks held: none
==6973==    at 0x402C44: Semaphore::get() (Semaphore.cpp:29)
==6973==    by 0x4012D0: main (test.cpp:61)
==6973== 
==6973== This conflicts with a previous write of size 4 by thread #9
==6973== Locks held: 1, at address 0x604740
==6973==    at 0x402C0B: Semaphore::V() (Semaphore.cpp:20)
==6973==    by 0x40114A: producer2(void*) (test.cpp:29)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973==  Address 0x604798 is 88 bytes inside data symbol "s"
==6973== 
==6973== ---Thread-Announcement------------------------------------------
==6973== 
==6973== Thread #2 was created
==6973==    at 0x59625EE: clone (clone.S:74)
==6973==    by 0x4E422B9: do_clone.constprop.3 (createthread.c:75)
==6973==    by 0x4E43762: create_thread (createthread.c:245)
==6973==    by 0x4E43762: pthread_create@@GLIBC_2.2.5 (pthread_create.c:606)
==6973==    by 0x4C2EEBD: pthread_create_WRK (hg_intercepts.c:270)
==6973==    by 0x402C6E: createPthread(void* (*)(void*)) (Semaphore.cpp:35)
==6973==    by 0x401260: main (test.cpp:52)
==6973== 
==6973== ----------------------------------------------------------------
==6973== 
==6973== Possible data race during read of size 8 at 0x604618 by thread #2
==6973== Locks held: none
==6973==    at 0x50E23A8: std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.20)
==6973==    by 0x50E28BC: std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.20)
==6973==    by 0x50EF899: std::ostream& std::ostream::_M_insert<long>(long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.20)
==6973==    by 0x4011EB: customer(void*) (test.cpp:41)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973== 
==6973== This conflicts with a previous write of size 8 by thread #1
==6973== Locks held: none
==6973==    at 0x50EF2AD: std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.20)
==6973==    by 0x50EF6E6: std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.20)
==6973==    by 0x4012E1: main (test.cpp:61)
==6973==  Address 0x604618 is 24 bytes inside data symbol "_ZSt4cout@@GLIBCXX_3.4"
==6973== 
==6973== ----------------------------------------------------------------
==6973== 
==6973== Possible data race during write of size 8 at 0x604618 by thread #2
==6973== Locks held: none
==6973==    at 0x50E23E7: std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.20)
==6973==    by 0x50E28BC: std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.20)
==6973==    by 0x50EF899: std::ostream& std::ostream::_M_insert<long>(long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.20)
==6973==    by 0x4011EB: customer(void*) (test.cpp:41)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973== 
==6973== This conflicts with a previous write of size 8 by thread #1
==6973== Locks held: none
==6973==    at 0x50EF2AD: std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.20)
==6973==    by 0x50EF6E6: std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.20)
==6973==    by 0x4012E1: main (test.cpp:61)
==6973==  Address 0x604618 is 24 bytes inside data symbol "_ZSt4cout@@GLIBCXX_3.4"
==6973== 
==6973== ----------------------------------------------------------------
==6973== 
==6973== Possible data race during write of size 8 at 0x6047F0 by thread #9
==6973== Locks held: none
==6973==    at 0x401D53: void std::deque<int, std::allocator<int> >::emplace_back<int>(int&&) (deque.tcc:139)
==6973==    by 0x401897: std::deque<int, std::allocator<int> >::push_back(int&&) (stl_deque.h:1413)
==6973==    by 0x40164D: std::queue<int, std::deque<int, std::allocator<int> > >::push(int&&) (stl_queue.h:221)
==6973==    by 0x401162: producer2(void*) (test.cpp:30)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973== 
==6973== This conflicts with a previous read of size 8 by thread #2
==6973== Locks held: none
==6973==    at 0x401DBA: std::_Deque_iterator<int, int&, int*>::difference_type std::operator-<int, int&, int*>(std::_Deque_iterator<int, int&, int*> const&, std::_Deque_iterator<int, int&, int*> const&) (stl_deque.h:341)
==6973==    by 0x4018C0: std::deque<int, std::allocator<int> >::size() const (stl_deque.h:1148)
==6973==    by 0x401667: std::queue<int, std::deque<int, std::allocator<int> > >::size() const (stl_queue.h:159)
==6973==    by 0x4011B5: customer(void*) (test.cpp:40)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973==  Address 0x6047f0 is 48 bytes inside data symbol "q"
==6973== 
==6973== ----------------------------------------------------------------
==6973== 
==6973==  Lock at 0x604740 was first observed
==6973==    at 0x4C30616: pthread_mutex_lock (hg_intercepts.c:593)
==6973==    by 0x402ACC: __gthread_mutex_lock(pthread_mutex_t*) (gthr-default.h:748)
==6973==    by 0x402CAB: std::mutex::lock() (mutex:135)
==6973==    by 0x402DD2: std::unique_lock<std::mutex>::lock() (mutex:474)
==6973==    by 0x402D5A: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (mutex:406)
==6973==    by 0x402B7B: Semaphore::P() (Semaphore.cpp:9)
==6973==    by 0x4011AB: customer(void*) (test.cpp:39)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973==  Address 0x604740 is 0 bytes inside data symbol "s"
==6973== 
==6973== Possible data race during write of size 4 at 0x604798 by thread #9
==6973== Locks held: 1, at address 0x604740
==6973==    at 0x402C0B: Semaphore::V() (Semaphore.cpp:20)
==6973==    by 0x40116C: producer2(void*) (test.cpp:31)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973== 
==6973== This conflicts with a previous read of size 4 by thread #1
==6973== Locks held: none
==6973==    at 0x402C44: Semaphore::get() (Semaphore.cpp:29)
==6973==    by 0x4012D0: main (test.cpp:61)
==6973==  Address 0x604798 is 88 bytes inside data symbol "s"
==6973== 
==6973== ---Thread-Announcement------------------------------------------
==6973== 
==6973== Thread #3 was created
==6973==    at 0x59625EE: clone (clone.S:74)
==6973==    by 0x4E422B9: do_clone.constprop.3 (createthread.c:75)
==6973==    by 0x4E43762: create_thread (createthread.c:245)
==6973==    by 0x4E43762: pthread_create@@GLIBC_2.2.5 (pthread_create.c:606)
==6973==    by 0x4C2EEBD: pthread_create_WRK (hg_intercepts.c:270)
==6973==    by 0x402C6E: createPthread(void* (*)(void*)) (Semaphore.cpp:35)
==6973==    by 0x40126E: main (test.cpp:53)
==6973== 
==6973== ----------------------------------------------------------------
==6973== 
==6973== Possible data race during read of size 8 at 0x6047D0 by thread #3
==6973== Locks held: none
==6973==    at 0x401DE4: std::_Deque_iterator<int, int&, int*>::difference_type std::operator-<int, int&, int*>(std::_Deque_iterator<int, int&, int*> const&, std::_Deque_iterator<int, int&, int*> const&) (stl_deque.h:341)
==6973==    by 0x4018C0: std::deque<int, std::allocator<int> >::size() const (stl_deque.h:1148)
==6973==    by 0x401667: std::queue<int, std::deque<int, std::allocator<int> > >::size() const (stl_queue.h:159)
==6973==    by 0x4011B5: customer(void*) (test.cpp:40)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973== 
==6973== This conflicts with a previous write of size 8 by thread #2
==6973== Locks held: none
==6973==    at 0x40193E: std::deque<int, std::allocator<int> >::pop_front() (stl_deque.h:1435)
==6973==    by 0x40169B: std::queue<int, std::deque<int, std::allocator<int> > >::pop() (stl_queue.h:244)
==6973==    by 0x401202: customer(void*) (test.cpp:42)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973==  Address 0x6047d0 is 16 bytes inside data symbol "q"
==6973== 
==6973== ----------------------------------------------------------------
==6973== 
==6973== Possible data race during read of size 8 at 0x6047D0 by thread #3
==6973== Locks held: none
==6973==    at 0x401902: std::deque<int, std::allocator<int> >::pop_front() (stl_deque.h:1431)
==6973==    by 0x40169B: std::queue<int, std::deque<int, std::allocator<int> > >::pop() (stl_queue.h:244)
==6973==    by 0x401202: customer(void*) (test.cpp:42)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973== 
==6973== This conflicts with a previous write of size 8 by thread #2
==6973== Locks held: none
==6973==    at 0x40193E: std::deque<int, std::allocator<int> >::pop_front() (stl_deque.h:1435)
==6973==    by 0x40169B: std::queue<int, std::deque<int, std::allocator<int> > >::pop() (stl_queue.h:244)
==6973==    by 0x401202: customer(void*) (test.cpp:42)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973==  Address 0x6047d0 is 16 bytes inside data symbol "q"
==6973== 
==6973== ----------------------------------------------------------------
==6973== 
==6973== Possible data race during write of size 8 at 0x6047D0 by thread #3
==6973== Locks held: none
==6973==    at 0x40193E: std::deque<int, std::allocator<int> >::pop_front() (stl_deque.h:1435)
==6973==    by 0x40169B: std::queue<int, std::deque<int, std::allocator<int> > >::pop() (stl_queue.h:244)
==6973==    by 0x401202: customer(void*) (test.cpp:42)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973== 
==6973== This conflicts with a previous write of size 8 by thread #2
==6973== Locks held: none
==6973==    at 0x40193E: std::deque<int, std::allocator<int> >::pop_front() (stl_deque.h:1435)
==6973==    by 0x40169B: std::queue<int, std::deque<int, std::allocator<int> > >::pop() (stl_queue.h:244)
==6973==    by 0x401202: customer(void*) (test.cpp:42)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973==  Address 0x6047d0 is 16 bytes inside data symbol "q"
==6973== 
==6973== ----------------------------------------------------------------
==6973== 
==6973== Possible data race during write of size 8 at 0x6047F0 by thread #9
==6973== Locks held: none
==6973==    at 0x401D53: void std::deque<int, std::allocator<int> >::emplace_back<int>(int&&) (deque.tcc:139)
==6973==    by 0x401897: std::deque<int, std::allocator<int> >::push_back(int&&) (stl_deque.h:1413)
==6973==    by 0x40164D: std::queue<int, std::deque<int, std::allocator<int> > >::push(int&&) (stl_queue.h:221)
==6973==    by 0x401184: producer2(void*) (test.cpp:32)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973== 
==6973== This conflicts with a previous read of size 8 by thread #3
==6973== Locks held: none
==6973==    at 0x401DBA: std::_Deque_iterator<int, int&, int*>::difference_type std::operator-<int, int&, int*>(std::_Deque_iterator<int, int&, int*> const&, std::_Deque_iterator<int, int&, int*> const&) (stl_deque.h:341)
==6973==    by 0x4018C0: std::deque<int, std::allocator<int> >::size() const (stl_deque.h:1148)
==6973==    by 0x401667: std::queue<int, std::deque<int, std::allocator<int> > >::size() const (stl_queue.h:159)
==6973==    by 0x4011B5: customer(void*) (test.cpp:40)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973==  Address 0x6047f0 is 48 bytes inside data symbol "q"
==6973== 
==6973== ----------------------------------------------------------------
==6973== 
==6973==  Lock at 0x604740 was first observed
==6973==    at 0x4C30616: pthread_mutex_lock (hg_intercepts.c:593)
==6973==    by 0x402ACC: __gthread_mutex_lock(pthread_mutex_t*) (gthr-default.h:748)
==6973==    by 0x402CAB: std::mutex::lock() (mutex:135)
==6973==    by 0x402DD2: std::unique_lock<std::mutex>::lock() (mutex:474)
==6973==    by 0x402D5A: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (mutex:406)
==6973==    by 0x402B7B: Semaphore::P() (Semaphore.cpp:9)
==6973==    by 0x4011AB: customer(void*) (test.cpp:39)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973==  Address 0x604740 is 0 bytes inside data symbol "s"
==6973== 
==6973== Possible data race during write of size 4 at 0x604798 by thread #9
==6973== Locks held: 1, at address 0x604740
==6973==    at 0x402C0B: Semaphore::V() (Semaphore.cpp:20)
==6973==    by 0x40118E: producer2(void*) (test.cpp:33)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973== 
==6973== This conflicts with a previous read of size 4 by thread #1
==6973== Locks held: none
==6973==    at 0x402C44: Semaphore::get() (Semaphore.cpp:29)
==6973==    by 0x4012D0: main (test.cpp:61)
==6973==  Address 0x604798 is 88 bytes inside data symbol "s"
==6973== 
==6973== ---Thread-Announcement------------------------------------------
==6973== 
==6973== Thread #8 was created
==6973==    at 0x59625EE: clone (clone.S:74)
==6973==    by 0x4E422B9: do_clone.constprop.3 (createthread.c:75)
==6973==    by 0x4E43762: create_thread (createthread.c:245)
==6973==    by 0x4E43762: pthread_create@@GLIBC_2.2.5 (pthread_create.c:606)
==6973==    by 0x4C2EEBD: pthread_create_WRK (hg_intercepts.c:270)
==6973==    by 0x402C6E: createPthread(void* (*)(void*)) (Semaphore.cpp:35)
==6973==    by 0x4012B4: main (test.cpp:58)
==6973== 
==6973== ----------------------------------------------------------------
==6973== 
==6973== Possible data race during read of size 8 at 0x6047F0 by thread #8
==6973== Locks held: none
==6973==    at 0x401D08: void std::deque<int, std::allocator<int> >::emplace_back<int>(int&&) (deque.tcc:134)
==6973==    by 0x401897: std::deque<int, std::allocator<int> >::push_back(int&&) (stl_deque.h:1413)
==6973==    by 0x40164D: std::queue<int, std::deque<int, std::allocator<int> > >::push(int&&) (stl_queue.h:221)
==6973==    by 0x4010B3: producer(void*) (test.cpp:15)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973== 
==6973== This conflicts with a previous write of size 8 by thread #9
==6973== Locks held: none
==6973==    at 0x401D53: void std::deque<int, std::allocator<int> >::emplace_back<int>(int&&) (deque.tcc:139)
==6973==    by 0x401897: std::deque<int, std::allocator<int> >::push_back(int&&) (stl_deque.h:1413)
==6973==    by 0x40164D: std::queue<int, std::deque<int, std::allocator<int> > >::push(int&&) (stl_queue.h:221)
==6973==    by 0x401184: producer2(void*) (test.cpp:32)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973==  Address 0x6047f0 is 48 bytes inside data symbol "q"
==6973== 
==6973== ---Thread-Announcement------------------------------------------
==6973== 
==6973== Thread #4 was created
==6973==    at 0x59625EE: clone (clone.S:74)
==6973==    by 0x4E422B9: do_clone.constprop.3 (createthread.c:75)
==6973==    by 0x4E43762: create_thread (createthread.c:245)
==6973==    by 0x4E43762: pthread_create@@GLIBC_2.2.5 (pthread_create.c:606)
==6973==    by 0x4C2EEBD: pthread_create_WRK (hg_intercepts.c:270)
==6973==    by 0x402C6E: createPthread(void* (*)(void*)) (Semaphore.cpp:35)
==6973==    by 0x40127C: main (test.cpp:54)
==6973== 
==6973== ----------------------------------------------------------------
==6973== 
==6973== Possible data race during write of size 8 at 0x6047F0 by thread #8
==6973== Locks held: none
==6973==    at 0x401D53: void std::deque<int, std::allocator<int> >::emplace_back<int>(int&&) (deque.tcc:139)
==6973==    by 0x401897: std::deque<int, std::allocator<int> >::push_back(int&&) (stl_deque.h:1413)
==6973==    by 0x40164D: std::queue<int, std::deque<int, std::allocator<int> > >::push(int&&) (stl_queue.h:221)
==6973==    by 0x4010B3: producer(void*) (test.cpp:15)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973== 
==6973== This conflicts with a previous read of size 8 by thread #4
==6973== Locks held: none
==6973==    at 0x401DBA: std::_Deque_iterator<int, int&, int*>::difference_type std::operator-<int, int&, int*>(std::_Deque_iterator<int, int&, int*> const&, std::_Deque_iterator<int, int&, int*> const&) (stl_deque.h:341)
==6973==    by 0x4018C0: std::deque<int, std::allocator<int> >::size() const (stl_deque.h:1148)
==6973==    by 0x401667: std::queue<int, std::deque<int, std::allocator<int> > >::size() const (stl_queue.h:159)
==6973==    by 0x4011B5: customer(void*) (test.cpp:40)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973==  Address 0x6047f0 is 48 bytes inside data symbol "q"
==6973== 
==6973== ----------------------------------------------------------------
==6973== 
==6973==  Lock at 0x604740 was first observed
==6973==    at 0x4C30616: pthread_mutex_lock (hg_intercepts.c:593)
==6973==    by 0x402ACC: __gthread_mutex_lock(pthread_mutex_t*) (gthr-default.h:748)
==6973==    by 0x402CAB: std::mutex::lock() (mutex:135)
==6973==    by 0x402DD2: std::unique_lock<std::mutex>::lock() (mutex:474)
==6973==    by 0x402D5A: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (mutex:406)
==6973==    by 0x402B7B: Semaphore::P() (Semaphore.cpp:9)
==6973==    by 0x4011AB: customer(void*) (test.cpp:39)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973==  Address 0x604740 is 0 bytes inside data symbol "s"
==6973== 
==6973== Possible data race during write of size 4 at 0x604798 by thread #8
==6973== Locks held: 1, at address 0x604740
==6973==    at 0x402C0B: Semaphore::V() (Semaphore.cpp:20)
==6973==    by 0x4010BD: producer(void*) (test.cpp:16)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973== 
==6973== This conflicts with a previous read of size 4 by thread #1
==6973== Locks held: none
==6973==    at 0x402C44: Semaphore::get() (Semaphore.cpp:29)
==6973==    by 0x4012D0: main (test.cpp:61)
==6973==  Address 0x604798 is 88 bytes inside data symbol "s"
==6973== 
==6973== ---Thread-Announcement------------------------------------------
==6973== 
==6973== Thread #5 was created
==6973==    at 0x59625EE: clone (clone.S:74)
==6973==    by 0x4E422B9: do_clone.constprop.3 (createthread.c:75)
==6973==    by 0x4E43762: create_thread (createthread.c:245)
==6973==    by 0x4E43762: pthread_create@@GLIBC_2.2.5 (pthread_create.c:606)
==6973==    by 0x4C2EEBD: pthread_create_WRK (hg_intercepts.c:270)
==6973==    by 0x402C6E: createPthread(void* (*)(void*)) (Semaphore.cpp:35)
==6973==    by 0x40128A: main (test.cpp:55)
==6973== 
==6973== ----------------------------------------------------------------
==6973== 
==6973== Possible data race during write of size 8 at 0x6047F0 by thread #8
==6973== Locks held: none
==6973==    at 0x401D53: void std::deque<int, std::allocator<int> >::emplace_back<int>(int&&) (deque.tcc:139)
==6973==    by 0x401897: std::deque<int, std::allocator<int> >::push_back(int&&) (stl_deque.h:1413)
==6973==    by 0x40164D: std::queue<int, std::deque<int, std::allocator<int> > >::push(int&&) (stl_queue.h:221)
==6973==    by 0x4010DF: producer(void*) (test.cpp:18)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973== 
==6973== This conflicts with a previous read of size 8 by thread #5
==6973== Locks held: none
==6973==    at 0x401DBA: std::_Deque_iterator<int, int&, int*>::difference_type std::operator-<int, int&, int*>(std::_Deque_iterator<int, int&, int*> const&, std::_Deque_iterator<int, int&, int*> const&) (stl_deque.h:341)
==6973==    by 0x4018C0: std::deque<int, std::allocator<int> >::size() const (stl_deque.h:1148)
==6973==    by 0x401667: std::queue<int, std::deque<int, std::allocator<int> > >::size() const (stl_queue.h:159)
==6973==    by 0x4011B5: customer(void*) (test.cpp:40)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973==  Address 0x6047f0 is 48 bytes inside data symbol "q"
==6973== 
==6973== ----------------------------------------------------------------
==6973== 
==6973==  Lock at 0x604740 was first observed
==6973==    at 0x4C30616: pthread_mutex_lock (hg_intercepts.c:593)
==6973==    by 0x402ACC: __gthread_mutex_lock(pthread_mutex_t*) (gthr-default.h:748)
==6973==    by 0x402CAB: std::mutex::lock() (mutex:135)
==6973==    by 0x402DD2: std::unique_lock<std::mutex>::lock() (mutex:474)
==6973==    by 0x402D5A: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (mutex:406)
==6973==    by 0x402B7B: Semaphore::P() (Semaphore.cpp:9)
==6973==    by 0x4011AB: customer(void*) (test.cpp:39)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973==  Address 0x604740 is 0 bytes inside data symbol "s"
==6973== 
==6973== Possible data race during write of size 4 at 0x604798 by thread #8
==6973== Locks held: 1, at address 0x604740
==6973==    at 0x402C0B: Semaphore::V() (Semaphore.cpp:20)
==6973==    by 0x4010E9: producer(void*) (test.cpp:19)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973== 
==6973== This conflicts with a previous read of size 4 by thread #1
==6973== Locks held: none
==6973==    at 0x402C44: Semaphore::get() (Semaphore.cpp:29)
==6973==    by 0x4012D0: main (test.cpp:61)
==6973==  Address 0x604798 is 88 bytes inside data symbol "s"
==6973== 
==6973== ---Thread-Announcement------------------------------------------
==6973== 
==6973== Thread #6 was created
==6973==    at 0x59625EE: clone (clone.S:74)
==6973==    by 0x4E422B9: do_clone.constprop.3 (createthread.c:75)
==6973==    by 0x4E43762: create_thread (createthread.c:245)
==6973==    by 0x4E43762: pthread_create@@GLIBC_2.2.5 (pthread_create.c:606)
==6973==    by 0x4C2EEBD: pthread_create_WRK (hg_intercepts.c:270)
==6973==    by 0x402C6E: createPthread(void* (*)(void*)) (Semaphore.cpp:35)
==6973==    by 0x401298: main (test.cpp:56)
==6973== 
==6973== ----------------------------------------------------------------
==6973== 
==6973== Possible data race during write of size 8 at 0x6047F0 by thread #8
==6973== Locks held: none
==6973==    at 0x401D53: void std::deque<int, std::allocator<int> >::emplace_back<int>(int&&) (deque.tcc:139)
==6973==    by 0x401897: std::deque<int, std::allocator<int> >::push_back(int&&) (stl_deque.h:1413)
==6973==    by 0x40164D: std::queue<int, std::deque<int, std::allocator<int> > >::push(int&&) (stl_queue.h:221)
==6973==    by 0x40110B: producer(void*) (test.cpp:21)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973== 
==6973== This conflicts with a previous read of size 8 by thread #6
==6973== Locks held: none
==6973==    at 0x401DBA: std::_Deque_iterator<int, int&, int*>::difference_type std::operator-<int, int&, int*>(std::_Deque_iterator<int, int&, int*> const&, std::_Deque_iterator<int, int&, int*> const&) (stl_deque.h:341)
==6973==    by 0x4018C0: std::deque<int, std::allocator<int> >::size() const (stl_deque.h:1148)
==6973==    by 0x401667: std::queue<int, std::deque<int, std::allocator<int> > >::size() const (stl_queue.h:159)
==6973==    by 0x4011B5: customer(void*) (test.cpp:40)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973==  Address 0x6047f0 is 48 bytes inside data symbol "q"
==6973== 
==6973== ----------------------------------------------------------------
==6973== 
==6973==  Lock at 0x604740 was first observed
==6973==    at 0x4C30616: pthread_mutex_lock (hg_intercepts.c:593)
==6973==    by 0x402ACC: __gthread_mutex_lock(pthread_mutex_t*) (gthr-default.h:748)
==6973==    by 0x402CAB: std::mutex::lock() (mutex:135)
==6973==    by 0x402DD2: std::unique_lock<std::mutex>::lock() (mutex:474)
==6973==    by 0x402D5A: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (mutex:406)
==6973==    by 0x402B7B: Semaphore::P() (Semaphore.cpp:9)
==6973==    by 0x4011AB: customer(void*) (test.cpp:39)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973==  Address 0x604740 is 0 bytes inside data symbol "s"
==6973== 
==6973== Possible data race during write of size 4 at 0x604798 by thread #8
==6973== Locks held: 1, at address 0x604740
==6973==    at 0x402C0B: Semaphore::V() (Semaphore.cpp:20)
==6973==    by 0x401115: producer(void*) (test.cpp:22)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973== 
==6973== This conflicts with a previous read of size 4 by thread #1
==6973== Locks held: none
==6973==    at 0x402C44: Semaphore::get() (Semaphore.cpp:29)
==6973==    by 0x4012D0: main (test.cpp:61)
==6973==  Address 0x604798 is 88 bytes inside data symbol "s"
==6973== 
==6973== ---Thread-Announcement------------------------------------------
==6973== 
==6973== Thread #10 was created
==6973==    at 0x59625EE: clone (clone.S:74)
==6973==    by 0x4E422B9: do_clone.constprop.3 (createthread.c:75)
==6973==    by 0x4E43762: create_thread (createthread.c:245)
==6973==    by 0x4E43762: pthread_create@@GLIBC_2.2.5 (pthread_create.c:606)
==6973==    by 0x4C2EEBD: pthread_create_WRK (hg_intercepts.c:270)
==6973==    by 0x402C6E: createPthread(void* (*)(void*)) (Semaphore.cpp:35)
==6973==    by 0x401369: main (test.cpp:70)
==6973== 
==6973== ----------------------------------------------------------------
==6973== 
==6973==  Lock at 0x604740 was first observed
==6973==    at 0x4C30616: pthread_mutex_lock (hg_intercepts.c:593)
==6973==    by 0x402ACC: __gthread_mutex_lock(pthread_mutex_t*) (gthr-default.h:748)
==6973==    by 0x402CAB: std::mutex::lock() (mutex:135)
==6973==    by 0x402DD2: std::unique_lock<std::mutex>::lock() (mutex:474)
==6973==    by 0x402D5A: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (mutex:406)
==6973==    by 0x402B7B: Semaphore::P() (Semaphore.cpp:9)
==6973==    by 0x4011AB: customer(void*) (test.cpp:39)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973==  Address 0x604740 is 0 bytes inside data symbol "s"
==6973== 
==6973== Possible data race during read of size 4 at 0x604798 by thread #1
==6973== Locks held: none
==6973==    at 0x402C44: Semaphore::get() (Semaphore.cpp:29)
==6973==    by 0x401381: main (test.cpp:72)
==6973== 
==6973== This conflicts with a previous write of size 4 by thread #10
==6973== Locks held: 1, at address 0x604740
==6973==    at 0x402B8A: Semaphore::P() (Semaphore.cpp:10)
==6973==    by 0x4011AB: customer(void*) (test.cpp:39)
==6973==    by 0x4C2F056: mythread_wrapper (hg_intercepts.c:234)
==6973==    by 0x4E430A3: start_thread (pthread_create.c:309)
==6973==    by 0x596262C: clone (clone.S:111)
==6973==  Address 0x604798 is 88 bytes inside data symbol "s"
==6973== 
==6973== 
==6973== For counts of detected and suppressed errors, rerun with: -v
==6973== Use --history-level=approx or =none to gain increased speed, at
==6973== the cost of reduced accuracy of conflicting-access information
==6973== ERROR SUMMARY: 42 errors from 18 contexts (suppressed: 288 from 76)
